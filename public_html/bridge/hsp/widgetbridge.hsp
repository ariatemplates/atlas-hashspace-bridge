var klass = require("hsp/klass");
var idCounter = 0;
var tplCtxt = new aria.templates.TemplateCtxt();
tplCtxt.initTemplate({classpath: "bridge.aria.Empty"}); // check if it can be done in a better way

var WidgetBridgeCtrl = klass({
    attributes:{
        "wlib":{type:"string", defaultValue:"", binding:"1-way"},
        "name":{type:"string", defaultValue:"", binding:"1-way"},
        "id":{type:"string", defaultValue:"", binding:"1-way"},
        "config":{type:"object", defaultValue:{}, binding:"1-way"},
        "data":{type:"object", defaultValue:{}, binding:"1-way"}
    },
    $init: function () {
        if (this.id == "") {
            this.id = "atwidget_" + idCounter++;
        }
    },
    $afterRender: function() { // $refresh?
        var lib = Aria.getClassRef(this.wlib);
        var dependencies = lib.getWidgetDependencies(this.name);
        Aria.load({
            classes : dependencies,
            oncomplete: {
                fn: this._afterLoad,
                args: lib,
                scope: this
            }
        });
    },

    _afterLoad: function (lib) {
        var out = new aria.templates.MarkupWriter(tplCtxt);
        lib.processWidgetMarkup(this.name, out, this.config);
        var section = out.getSection();
        var domElt = aria.utils.Dom.replaceHTML(this.id, section.html);
        section.setDom(domElt);
        aria.utils.Delegate.addExpando(domElt, section.delegateId);
        section.initWidgets();
    }
});

# export template widgetbridge using c:WidgetBridgeCtrl
    <div id="{c.id}">
    </div>
# /template